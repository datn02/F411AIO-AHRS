<html>
<body>
<pre>
<h1>µVision Build Log</h1>
<h2>Tool Versions:</h2>
IDE-Version: µVision V5.34.0.0
Copyright (C) 2021 ARM Ltd and ARM Germany GmbH. All rights reserved.
License Information: Duc Anh Tran Nhan, NUS, LIC=----
 
Tool Versions:
Toolchain:       MDK-Lite  Version: 5.34.0.0
Toolchain Path:  E:\Keil uVision\ARM\ARMCLANG\Bin
C Compiler:      ArmClang.exe V6.16
Assembler:       Armasm.exe V6.16
Linker/Locator:  ArmLink.exe V6.16
Library Manager: ArmAr.exe V6.16
Hex Converter:   FromElf.exe V6.16
CPU DLL:         SARMCM3.DLL V5.34.0.0
Dialog DLL:      DCM.DLL V1.17.3.0
Target DLL:      UL2CM3.DLL V1.163.9.0
Dialog DLL:      TCM.DLL V1.48.0.0
 
<h2>Project:</h2>
E:\ARM Programming\F411_AHRS_Ver\F411_AHRS.uvprojx
Project File Date:  06/20/2021

<h2>Output:</h2>
*** Using Compiler 'V6.16', folder: 'E:\Keil uVision\ARM\ARMCLANG\Bin'
Rebuild target 'Target 1'
pid.c(114): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                LED_ON;                                                 // turn on led
                ^~~~~~
./LED_Config.h(5): note: expanded from macro 'LED_ON'
#define LED_ON                  GPIOC->ODR &= ~((1 << 13) | (1 << 14))
                                           ~~ ^~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.
compiling pid.c...
mpu6000.c(19): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        ENABLE_MPU6000;
        ^~~~~~~~~~~~~~
./mpu6000.h(70): note: expanded from macro 'ENABLE_MPU6000'
#define ENABLE_MPU6000 GPIOA->ODR &= ~(1 << 4)
                                  ~~ ^~~~~~~~~
mpu6000.c(37): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        ENABLE_MPU6000;
        ^~~~~~~~~~~~~~
./mpu6000.h(70): note: expanded from macro 'ENABLE_MPU6000'
#define ENABLE_MPU6000 GPIOA->ODR &= ~(1 << 4)
                                  ~~ ^~~~~~~~~
mpu6000.c(45): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        ENABLE_MPU6000;
        ^~~~~~~~~~~~~~
./mpu6000.h(70): note: expanded from macro 'ENABLE_MPU6000'
#define ENABLE_MPU6000 GPIOA->ODR &= ~(1 << 4)
                                  ~~ ^~~~~~~~~
mpu6000.c(53): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        ENABLE_MPU6000;
        ^~~~~~~~~~~~~~
./mpu6000.h(70): note: expanded from macro 'ENABLE_MPU6000'
#define ENABLE_MPU6000 GPIOA->ODR &= ~(1 << 4)
                                  ~~ ^~~~~~~~~
mpu6000.c(62): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        ENABLE_MPU6000;
        ^~~~~~~~~~~~~~
./mpu6000.h(70): note: expanded from macro 'ENABLE_MPU6000'
#define ENABLE_MPU6000 GPIOA->ODR &= ~(1 << 4)
                                  ~~ ^~~~~~~~~
mpu6000.c(71): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        ENABLE_MPU6000;
        ^~~~~~~~~~~~~~
./mpu6000.h(70): note: expanded from macro 'ENABLE_MPU6000'
#define ENABLE_MPU6000 GPIOA->ODR &= ~(1 << 4)
                                  ~~ ^~~~~~~~~
mpu6000.c(80): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        ENABLE_MPU6000;
        ^~~~~~~~~~~~~~
./mpu6000.h(70): note: expanded from macro 'ENABLE_MPU6000'
#define ENABLE_MPU6000 GPIOA->ODR &= ~(1 << 4)
                                  ~~ ^~~~~~~~~
mpu6000.c(90): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        ENABLE_MPU6000;
        ^~~~~~~~~~~~~~
./mpu6000.h(70): note: expanded from macro 'ENABLE_MPU6000'
#define ENABLE_MPU6000 GPIOA->ODR &= ~(1 << 4)
                                  ~~ ^~~~~~~~~
mpu6000.c(100): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        ENABLE_MPU6000;
        ^~~~~~~~~~~~~~
./mpu6000.h(70): note: expanded from macro 'ENABLE_MPU6000'
#define ENABLE_MPU6000 GPIOA->ODR &= ~(1 << 4)
                                  ~~ ^~~~~~~~~
mpu6000.c(109): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        ENABLE_MPU6000;
        ^~~~~~~~~~~~~~
./mpu6000.h(70): note: expanded from macro 'ENABLE_MPU6000'
#define ENABLE_MPU6000 GPIOA->ODR &= ~(1 << 4)
                                  ~~ ^~~~~~~~~
mpu6000.c(127): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        ENABLE_MPU6000;
        ^~~~~~~~~~~~~~
./mpu6000.h(70): note: expanded from macro 'ENABLE_MPU6000'
#define ENABLE_MPU6000 GPIOA->ODR &= ~(1 << 4)
                                  ~~ ^~~~~~~~~
11 warnings generated.
compiling mpu6000.c...
LED_Config.c(15): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        GPIOC->OTYPER &= ~((1 << 13) | (1 << 14));
                      ~~ ^~~~~~~~~~~~~~~~~~~~~~~~
LED_Config.c(21): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        GPIOC->PUPDR &= ~((1 << 29) | (1 << 28) | (1 << 27) | (1 << 26));
                     ~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2 warnings generated.
compiling LED_Config.c...
MahonyAHRS.c(105): warning: implicit conversion loses floating-point precision: 'double' to 'float' [-Wimplicit-float-conversion]
                _2bx = sqrt(hx * hx + hy * hy);
                     ~ ^~~~~~~~~~~~~~~~~~~~~~~
MahonyAHRS.c(105): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
                _2bx = sqrt(hx * hx + hy * hy);
                       ~~~~ ~~~~~~~~^~~~~~~~~
2 warnings generated.
compiling MahonyAHRS.c...
compiling main.c...
mixer.c(27): warning: implicit conversion turns floating-point number into integer: 'float' to 'uint16_t' (aka 'unsigned short') [-Wfloat-conversion]
                esc_1 = (uint16_t) throttle - pid_output_pitch + pid_output_roll - pid_output_yaw;        //Calculate the pulse for esc 1 (front-right - CCW).
                      ~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~
mixer.c(28): warning: implicit conversion turns floating-point number into integer: 'float' to 'uint16_t' (aka 'unsigned short') [-Wfloat-conversion]
    esc_2 = (uint16_t) throttle + pid_output_pitch + pid_output_roll + pid_output_yaw;        //Calculate the pulse for esc 2 (rear-right - CW).
          ~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~
mixer.c(29): warning: implicit conversion turns floating-point number into integer: 'float' to 'uint16_t' (aka 'unsigned short') [-Wfloat-conversion]
    esc_3 = (uint16_t) throttle + pid_output_pitch - pid_output_roll - pid_output_yaw;        //Calculate the pulse for esc 3 (rear-left - CCW).
          ~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~
mixer.c(30): warning: implicit conversion turns floating-point number into integer: 'float' to 'uint16_t' (aka 'unsigned short') [-Wfloat-conversion]
    esc_4 = (uint16_t) throttle - pid_output_pitch - pid_output_roll + pid_output_yaw;        //Calculate the pulse for esc 4 (front-left - CW).
          ~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~
4 warnings generated.
compiling mixer.c...
ibus.c(32): warning: implicit conversion loses integer precision: 'int' to 'uint16_t' (aka 'unsigned short') [-Wimplicit-int-conversion]
      rxsum = (uint16_t) ibus[30] + (ibus[31]<<8);
            ~ ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~
1 warning generated.
compiling ibus.c...
compiling RCC_Config.c...
task.c(48): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                LED_ON;
                ^~~~~~
./LED_Config.h(5): note: expanded from macro 'LED_ON'
#define LED_ON                  GPIOC->ODR &= ~((1 << 13) | (1 << 14))
                                           ~~ ^~~~~~~~~~~~~~~~~~~~~~~~
task.c(52): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                LED_ON;
                ^~~~~~
./LED_Config.h(5): note: expanded from macro 'LED_ON'
#define LED_ON                  GPIOC->ODR &= ~((1 << 13) | (1 << 14))
                                           ~~ ^~~~~~~~~~~~~~~~~~~~~~~~
task.c(80): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                LED_ON;
                ^~~~~~
./LED_Config.h(5): note: expanded from macro 'LED_ON'
#define LED_ON                  GPIOC->ODR &= ~((1 << 13) | (1 << 14))
                                           ~~ ^~~~~~~~~~~~~~~~~~~~~~~~
task.c(84): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                LED_ON;
                ^~~~~~
./LED_Config.h(5): note: expanded from macro 'LED_ON'
#define LED_ON                  GPIOC->ODR &= ~((1 << 13) | (1 << 14))
                                           ~~ ^~~~~~~~~~~~~~~~~~~~~~~~
task.c(88): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                LED_ON;
                ^~~~~~
./LED_Config.h(5): note: expanded from macro 'LED_ON'
#define LED_ON                  GPIOC->ODR &= ~((1 << 13) | (1 << 14))
                                           ~~ ^~~~~~~~~~~~~~~~~~~~~~~~
5 warnings generated.
compiling task.c...
SPI.c(12): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        GPIOA->MODER &= ~((1 << 9) | (1 << 10) | (1 << 12) | (1 << 14));
                     ~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SPI.c(18): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        GPIOA->PUPDR &= ~((1 << 8) | (1 << 9));
                     ~~ ^~~~~~~~~~~~~~~~~~~~~~
SPI.c(45): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        SPI1->CR1 &= ~(1 << 7);
                  ~~ ^~~~~~~~~
SPI.c(51): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        SPI1->CR1 &= ~((1 << 10) | (1 << 11));
                  ~~ ^~~~~~~~~~~~~~~~~~~~~~~~
SPI.c(110): warning: implicit conversion loses integer precision: 'volatile uint32_t' (aka 'volatile unsigned int') to 'uint16_t' (aka 'unsigned short') [-Wimplicit-int-conversion]
        tempRegister = SPIx->CR1;
                     ~ ~~~~~~^~~
5 warnings generated.
compiling SPI.c...
compiling system_stm32f4xx.c...
timer.c(50): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        GPIOB->MODER &= ~((1 << 8) | (1 << 10) | (1 << 12) | (1 << 14));
                     ~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
timer.c(57): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        GPIOB->PUPDR &= ~((3 << 8) | (3 << 10) | (3 << 12) | (3 << 14));
                     ~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
timer.c(129): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        DMA1_Stream4->CR &= ~(1 << 0);
                         ~~ ^~~~~~~~~
timer.c(132): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        DMA1_Stream5->CR &= ~(1 << 0);
                         ~~ ^~~~~~~~~
timer.c(135): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        DMA1_Stream0->CR &= ~(1 << 0);
                         ~~ ^~~~~~~~~
timer.c(138): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        DMA1_Stream3->CR &= ~(1 << 0);
                         ~~ ^~~~~~~~~
timer.c(331): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                DMA1_Stream4->CR &= ~(1 << 0);
                                 ~~ ^~~~~~~~~
timer.c(348): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                DMA1_Stream5->CR &= ~(1 << 0);
                                 ~~ ^~~~~~~~~
timer.c(365): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                DMA1_Stream0->CR &= ~(1 << 0);
                                 ~~ ^~~~~~~~~
timer.c(382): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                DMA1_Stream3->CR &= ~(1 << 0);
                                 ~~ ^~~~~~~~~
10 warnings generated.
compiling timer.c...
usart.c(22): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        GPIOA->MODER &= ~((1 << 18) | (1 << 20));
                     ~~ ^~~~~~~~~~~~~~~~~~~~~~~~
usart.c(35): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        USART1->CR1 &= ~(1 << 12);
                    ~~ ^~~~~~~~~~
usart.c(61): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        GPIOA->MODER &= ~((1 << 4) | (1 << 6));
                     ~~ ^~~~~~~~~~~~~~~~~~~~~~
usart.c(75): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        USART2->CR1 &= ~(1 << 12);
                    ~~ ^~~~~~~~~~
usart.c(86): warning: unused variable 'buff' [-Wunused-variable]
        char buff[80];
             ^
usart.c(84): warning: unused parameter 'msg' [-Wunused-parameter]
void printMsg(char *msg, ...) {
                    ^
6 warnings generated.
compiling usart.c...
complementary_filter.c(18): warning: implicit conversion loses floating-point precision: 'double' to 'float' [-Wimplicit-float-conversion]
        float acc_total_vector = sqrt((acc_pitch * acc_pitch) + (acc_roll * acc_roll) + (acc_yaw * acc_yaw));
              ~~~~~~~~~~~~~~~~   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
complementary_filter.c(21): warning: implicit conversion from 'int' to 'float' may lose precision [-Wimplicit-int-float-conversion]
        if(abs(acc_pitch) < acc_total_vector) 
           ^~~~~~~~~~~~~~ ~
complementary_filter.c(25): warning: implicit conversion from 'int' to 'float' may lose precision [-Wimplicit-int-float-conversion]
        if(abs(acc_roll) < acc_total_vector)
           ^~~~~~~~~~~~~ ~
3 warnings generated.
compiling complementary_filter.c...
assembling startup_stm32f411xe.s...
linking...
Program Size: Code=8100 RO-data=440 RW-data=12 ZI-data=1992  
FromELF: creating hex file...
".\Objects\F411_AHRS.axf" - 0 Error(s), 50 Warning(s).

<h2>Software Packages used:</h2>

Package Vendor: ARM
                http://www.keil.com/pack/ARM.CMSIS.5.7.0.pack
                ARM.CMSIS.5.7.0
                CMSIS (Cortex Microcontroller Software Interface Standard)
   * Component: CORE Version: 5.4.0

Package Vendor: Keil
                http://www.keil.com/pack/Keil.STM32F4xx_DFP.2.15.0.pack
                Keil.STM32F4xx_DFP.2.15.0
                STMicroelectronics STM32F4 Series Device Support, Drivers and Examples
   * Component: Startup Version: 2.6.3

<h2>Collection of Component include folders:</h2>
  .\RTE\_Target_1
  E:\Keil uVision\ARM\CMSIS\5.7.0\CMSIS\Core\Include
  E:\Keil uVision\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include

<h2>Collection of Component Files used:</h2>

   * Component: ARM::CMSIS:CORE:5.4.0

   * Component: Keil::Device:Startup:2.6.3
      Source file:   MDK\Device\Source\ARM\STM32F4xx_OTP.s
      Include file:  Drivers\CMSIS\Device\ST\STM32F4xx\Include\stm32f4xx.h
      Source file:   MDK\Device\Source\ARM\STM32F411xx_OPT.s
      Source file:   Drivers\CMSIS\Device\ST\STM32F4xx\Source\Templates\arm\startup_stm32f411xe.s
      Source file:   Drivers\CMSIS\Device\ST\STM32F4xx\Source\Templates\system_stm32f4xx.c
Build Time Elapsed:  00:00:03
</pre>
</body>
</html>
